import { render, screen } from '@testing-library/react'
import { usePathname } from 'next/navigation'
import Header from '@/components/Header'

// Next.js ÌõÖ Î™®ÌÇπ
jest.mock('next/navigation', () => ({
  usePathname: jest.fn()
}))

// Ìè∞Ìä∏ Î™®ÌÇπ
jest.mock('@/styles/fonts', () => ({
  oswald: { className: 'oswald-font' }
}))

const menuActiveClass = 'text-[var(--color-primary)]'
const menuLinkActiveClass = 'text-inherit'

describe('<Header>', () => {
  beforeEach(() => {})

  afterEach(() => {
    jest.clearAllMocks()
  })

  // Ìó§Îçî Í∏∞Î≥∏ Î†åÎçîÎßÅ ÌôïÏù∏
  test('Ìó§ÎçîÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎêúÎã§', () => {
    render(<Header />)
    const header = screen.getByRole('banner')
    expect(header).toBeInTheDocument()
  })

  // Î©îÎâ¥ Ìï≠Î™©Îì§ Ïò¨Î∞îÎ•∏ Î†åÎçîÎßÅ ÌôïÏù∏
  test('Î©îÎâ¥ Ìï≠Î™©Îì§Ïù¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎêúÎã§', () => {
    render(<Header />)

    expect(screen.getByText('üîç Search')).toBeInTheDocument()
    expect(screen.getByText('üìΩÔ∏è Sample Movie')).toBeInTheDocument()
  })

  // ÌòÑÏû¨ Í≤ΩÎ°úÏóê Îî∞Î•∏ ÌôúÏÑ± Î©îÎâ¥ Ïä§ÌÉÄÏùº Ï†ÅÏö© ÌôïÏù∏
  test('ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä "/"Ïùº Îïå Search Î©îÎâ¥Í∞Ä ÌôúÏÑ±ÌôîÎêúÎã§', () => {
    ;(usePathname as jest.Mock).mockReturnValue('/')
    render(<Header />)

    // liÏóê ÌôúÏÑ± ÌÅ¥ÎûòÏä§Í∞Ä Î∂ôÎäîÏßÄ ÌôïÏù∏
    const searchText = screen.getByText('üîç Search')
    const searchLi = searchText.closest('li')
    expect(searchLi).toBeTruthy()
    expect(searchLi?.className).toContain(menuActiveClass)

    // ÎßÅÌÅ¨ÏóêÎäî 'text-inherit'Í∞Ä Ï†ÅÏö©ÎêòÎäîÏßÄ ÌôïÏù∏ (activeÏãú)
    const searchLink = screen.getByText('üîç Search')
    expect(searchLink.className).toContain(menuLinkActiveClass)
  })

  test('ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä "/movies/tt4520988"Ïùº Îïå Sample Movie Î©îÎâ¥Í∞Ä ÌôúÏÑ±ÌôîÎêúÎã§', () => {
    ;(usePathname as jest.Mock).mockReturnValue('/movies/tt4520988')
    render(<Header />)

    const sampleText = screen.getByText('üìΩÔ∏è Sample Movie')
    const sampleLi = sampleText.closest('li')
    expect(sampleLi).toBeTruthy()
    expect(sampleLi?.className).toContain(menuActiveClass)

    // Sample Movie ÎßÅÌÅ¨Ïóê 'text-inherit'Í∞Ä Ï†ÅÏö©ÎêòÎäîÏßÄ ÌôïÏù∏
    const sampleLink = screen.getByText('üìΩÔ∏è Sample Movie')
    expect(sampleLink.className).toContain(menuLinkActiveClass)

    // SearchÎäî ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú (active ÌÅ¥ÎûòÏä§ ÏóÜÏùå)
    const searchText = screen.getByText('üîç Search')
    const searchLi = searchText.closest('li')
    expect(searchLi?.className).not.toContain(menuActiveClass)
    expect(searchText.className).not.toContain(menuLinkActiveClass)
  })

  test('Ïïå Ïàò ÏóÜÎäî Í≤ΩÎ°úÏùº Îïå Î™®Îì† Î©îÎâ¥Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêúÎã§', () => {
    ;(usePathname as jest.Mock).mockReturnValue('/unknown/path')
    render(<Header />)

    const searchText = screen.getByText('üîç Search')
    const searchLi = searchText.closest('li')
    expect(searchLi?.className).not.toContain(menuActiveClass)
    expect(searchText.className).not.toContain(menuLinkActiveClass)

    const sampleText = screen.getByText('üìΩÔ∏è Sample Movie')
    const sampleLi = sampleText.closest('li')
    expect(sampleLi?.className).not.toContain(menuActiveClass)
    expect(sampleText.className).not.toContain(menuLinkActiveClass)
  })
})
